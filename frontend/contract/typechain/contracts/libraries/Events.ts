/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface EventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "AirdropClaimed"
      | "DepositOnGovernance"
      | "NewTokenOnboarded"
  ): EventFragment;
}

export namespace AirdropClaimedEvent {
  export type InputTuple = [
    from: AddressLike,
    erc20: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, erc20: string, value: bigint];
  export interface OutputObject {
    from: string;
    erc20: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositOnGovernanceEvent {
  export type InputTuple = [
    from: AddressLike,
    erc20: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, erc20: string, value: bigint];
  export interface OutputObject {
    from: string;
    erc20: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewTokenOnboardedEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, value: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Events extends BaseContract {
  connect(runner?: ContractRunner | null): Events;
  waitForDeployment(): Promise<this>;

  interface: EventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AirdropClaimed"
  ): TypedContractEvent<
    AirdropClaimedEvent.InputTuple,
    AirdropClaimedEvent.OutputTuple,
    AirdropClaimedEvent.OutputObject
  >;
  getEvent(
    key: "DepositOnGovernance"
  ): TypedContractEvent<
    DepositOnGovernanceEvent.InputTuple,
    DepositOnGovernanceEvent.OutputTuple,
    DepositOnGovernanceEvent.OutputObject
  >;
  getEvent(
    key: "NewTokenOnboarded"
  ): TypedContractEvent<
    NewTokenOnboardedEvent.InputTuple,
    NewTokenOnboardedEvent.OutputTuple,
    NewTokenOnboardedEvent.OutputObject
  >;

  filters: {
    "AirdropClaimed(address,address,uint256)": TypedContractEvent<
      AirdropClaimedEvent.InputTuple,
      AirdropClaimedEvent.OutputTuple,
      AirdropClaimedEvent.OutputObject
    >;
    AirdropClaimed: TypedContractEvent<
      AirdropClaimedEvent.InputTuple,
      AirdropClaimedEvent.OutputTuple,
      AirdropClaimedEvent.OutputObject
    >;

    "DepositOnGovernance(address,address,uint256)": TypedContractEvent<
      DepositOnGovernanceEvent.InputTuple,
      DepositOnGovernanceEvent.OutputTuple,
      DepositOnGovernanceEvent.OutputObject
    >;
    DepositOnGovernance: TypedContractEvent<
      DepositOnGovernanceEvent.InputTuple,
      DepositOnGovernanceEvent.OutputTuple,
      DepositOnGovernanceEvent.OutputObject
    >;

    "NewTokenOnboarded(address,address,uint256)": TypedContractEvent<
      NewTokenOnboardedEvent.InputTuple,
      NewTokenOnboardedEvent.OutputTuple,
      NewTokenOnboardedEvent.OutputObject
    >;
    NewTokenOnboarded: TypedContractEvent<
      NewTokenOnboardedEvent.InputTuple,
      NewTokenOnboardedEvent.OutputTuple,
      NewTokenOnboardedEvent.OutputObject
    >;
  };
}
