/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DataTypes {
  export type AdminRulesStruct = {
    customRules: boolean;
    initialSupply: BigNumberish;
    maxSupply: BigNumberish;
    sponsorTokenRequirement: BigNumberish;
    adminRetainedTokensPercentage: BigNumberish;
    networkParticipationPercentage: BigNumberish;
    networkToChildAllocationPercentage: BigNumberish;
    adminLegacyFeePercentage: BigNumberish;
    adminRevokeFeePercentage: BigNumberish;
    governancePercentageToTokensPercentage: BigNumberish;
  };

  export type AdminRulesStructOutput = [
    customRules: boolean,
    initialSupply: bigint,
    maxSupply: bigint,
    sponsorTokenRequirement: bigint,
    adminRetainedTokensPercentage: bigint,
    networkParticipationPercentage: bigint,
    networkToChildAllocationPercentage: bigint,
    adminLegacyFeePercentage: bigint,
    adminRevokeFeePercentage: bigint,
    governancePercentageToTokensPercentage: bigint
  ] & {
    customRules: boolean;
    initialSupply: bigint;
    maxSupply: bigint;
    sponsorTokenRequirement: bigint;
    adminRetainedTokensPercentage: bigint;
    networkParticipationPercentage: bigint;
    networkToChildAllocationPercentage: bigint;
    adminLegacyFeePercentage: bigint;
    adminRevokeFeePercentage: bigint;
    governancePercentageToTokensPercentage: bigint;
  };
}

export interface ITokenReputationFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "adminOf"
      | "childTokenToNetworkTokens"
      | "mint"
      | "rulesOf"
      | "setRules"
      | "tokenOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adminOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "childTokenToNetworkTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rulesOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRules",
    values: [DataTypes.AdminRulesStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOf",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "adminOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "childTokenToNetworkTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rulesOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenOf", data: BytesLike): Result;
}

export interface ITokenReputationFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ITokenReputationFactory;
  waitForDeployment(): Promise<this>;

  interface: ITokenReputationFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adminOf: TypedContractMethod<[_token: AddressLike], [string], "view">;

  childTokenToNetworkTokens: TypedContractMethod<
    [_childToken: AddressLike],
    [string],
    "view"
  >;

  mint: TypedContractMethod<
    [_sponsored: AddressLike, _name: string, _symbol: string],
    [string],
    "nonpayable"
  >;

  rulesOf: TypedContractMethod<
    [_network: AddressLike, _for: AddressLike],
    [DataTypes.AdminRulesStructOutput],
    "view"
  >;

  setRules: TypedContractMethod<
    [_rules: DataTypes.AdminRulesStruct, _sponsored: AddressLike],
    [void],
    "nonpayable"
  >;

  tokenOf: TypedContractMethod<[_admin: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adminOf"
  ): TypedContractMethod<[_token: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "childTokenToNetworkTokens"
  ): TypedContractMethod<[_childToken: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [_sponsored: AddressLike, _name: string, _symbol: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rulesOf"
  ): TypedContractMethod<
    [_network: AddressLike, _for: AddressLike],
    [DataTypes.AdminRulesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "setRules"
  ): TypedContractMethod<
    [_rules: DataTypes.AdminRulesStruct, _sponsored: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenOf"
  ): TypedContractMethod<[_admin: AddressLike], [string], "view">;

  filters: {};
}
