/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DataTypes {
  export type AdminRulesStruct = {
    customRules: boolean;
    initialSupply: BigNumberish;
    maxSupply: BigNumberish;
    sponsorTokenRequirement: BigNumberish;
    adminRetainedTokensPercentage: BigNumberish;
    networkParticipationPercentage: BigNumberish;
    networkToChildAllocationPercentage: BigNumberish;
    adminLegacyFeePercentage: BigNumberish;
    adminRevokeFeePercentage: BigNumberish;
    governancePercentageToTokensPercentage: BigNumberish;
  };

  export type AdminRulesStructOutput = [
    customRules: boolean,
    initialSupply: bigint,
    maxSupply: bigint,
    sponsorTokenRequirement: bigint,
    adminRetainedTokensPercentage: bigint,
    networkParticipationPercentage: bigint,
    networkToChildAllocationPercentage: bigint,
    adminLegacyFeePercentage: bigint,
    adminRevokeFeePercentage: bigint,
    governancePercentageToTokensPercentage: bigint
  ] & {
    customRules: boolean;
    initialSupply: bigint;
    maxSupply: bigint;
    sponsorTokenRequirement: bigint;
    adminRetainedTokensPercentage: bigint;
    networkParticipationPercentage: bigint;
    networkToChildAllocationPercentage: bigint;
    adminLegacyFeePercentage: bigint;
    adminRevokeFeePercentage: bigint;
    governancePercentageToTokensPercentage: bigint;
  };
}

export interface ITokenReputationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addReserveSponsor"
      | "addReserveSponsorFromFactory"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "baseTokenURI"
      | "commitTokenReputation"
      | "dataURI"
      | "depositReputation"
      | "depositReputationFromWallet"
      | "findRules"
      | "isBanned"
      | "legacyLength"
      | "mint"
      | "onboardParticipantToken"
      | "owner"
      | "particularRules"
      | "poolTokensForGovernance"
      | "poolTokensForSponsor"
      | "poolTokensReputation"
      | "renounceOwnership"
      | "revokeParticipation"
      | "rules"
      | "setDataURI"
      | "setTokenURI"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "withdrawReputationFromFactory"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Approval" | "Transfer"): EventFragment;

  encodeFunctionData(
    functionFragment: "addReserveSponsor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addReserveSponsorFromFactory",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "baseTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitTokenReputation",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "dataURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositReputation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositReputationFromWallet",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findRules",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBanned",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "legacyLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "onboardParticipantToken",
    values: [BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "particularRules",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolTokensForGovernance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolTokensForSponsor",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolTokensReputation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeParticipation",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "rules", values?: undefined): string;
  encodeFunctionData(functionFragment: "setDataURI", values: [string]): string;
  encodeFunctionData(functionFragment: "setTokenURI", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReputationFromFactory",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addReserveSponsor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addReserveSponsorFromFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitTokenReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dataURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositReputationFromWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "findRules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isBanned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "legacyLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onboardParticipantToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "particularRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolTokensForGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolTokensForSponsor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolTokensReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeParticipation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDataURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReputationFromFactory",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITokenReputation extends BaseContract {
  connect(runner?: ContractRunner | null): ITokenReputation;
  waitForDeployment(): Promise<this>;

  interface: ITokenReputationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addReserveSponsor: TypedContractMethod<
    [_erc20: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  addReserveSponsorFromFactory: TypedContractMethod<
    [_for: AddressLike, _erc20: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  baseTokenURI: TypedContractMethod<[], [string], "view">;

  commitTokenReputation: TypedContractMethod<
    [_amount: BigNumberish, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  dataURI: TypedContractMethod<[], [string], "view">;

  depositReputation: TypedContractMethod<
    [_amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  depositReputationFromWallet: TypedContractMethod<
    [_from: AddressLike, _amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  findRules: TypedContractMethod<
    [_sponsored: AddressLike],
    [DataTypes.AdminRulesStructOutput],
    "view"
  >;

  isBanned: TypedContractMethod<[_addr: AddressLike], [boolean], "view">;

  legacyLength: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  onboardParticipantToken: TypedContractMethod<
    [_amount: BigNumberish, _sponsored: AddressLike, _name: string],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  particularRules: TypedContractMethod<
    [_addr: AddressLike],
    [DataTypes.AdminRulesStructOutput],
    "view"
  >;

  poolTokensForGovernance: TypedContractMethod<
    [_addr: AddressLike],
    [bigint],
    "view"
  >;

  poolTokensForSponsor: TypedContractMethod<
    [_sponsorOrToken: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;

  poolTokensReputation: TypedContractMethod<
    [_addr: AddressLike],
    [bigint],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeParticipation: TypedContractMethod<
    [_amount: BigNumberish, _token: AddressLike],
    [void],
    "nonpayable"
  >;

  rules: TypedContractMethod<[], [DataTypes.AdminRulesStructOutput], "view">;

  setDataURI: TypedContractMethod<[_dataURI: string], [void], "nonpayable">;

  setTokenURI: TypedContractMethod<[_tokenURI: string], [void], "nonpayable">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[id: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawReputationFromFactory: TypedContractMethod<
    [_token: AddressLike, _toNewNetwork: AddressLike, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addReserveSponsor"
  ): TypedContractMethod<
    [_erc20: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addReserveSponsorFromFactory"
  ): TypedContractMethod<
    [_for: AddressLike, _erc20: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseTokenURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "commitTokenReputation"
  ): TypedContractMethod<
    [_amount: BigNumberish, _token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dataURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositReputation"
  ): TypedContractMethod<[_amount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "depositReputationFromWallet"
  ): TypedContractMethod<
    [_from: AddressLike, _amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "findRules"
  ): TypedContractMethod<
    [_sponsored: AddressLike],
    [DataTypes.AdminRulesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBanned"
  ): TypedContractMethod<[_addr: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "legacyLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onboardParticipantToken"
  ): TypedContractMethod<
    [_amount: BigNumberish, _sponsored: AddressLike, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "particularRules"
  ): TypedContractMethod<
    [_addr: AddressLike],
    [DataTypes.AdminRulesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolTokensForGovernance"
  ): TypedContractMethod<[_addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolTokensForSponsor"
  ): TypedContractMethod<
    [_sponsorOrToken: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolTokensReputation"
  ): TypedContractMethod<[_addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeParticipation"
  ): TypedContractMethod<
    [_amount: BigNumberish, _token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rules"
  ): TypedContractMethod<[], [DataTypes.AdminRulesStructOutput], "view">;
  getFunction(
    nameOrSignature: "setDataURI"
  ): TypedContractMethod<[_dataURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenURI"
  ): TypedContractMethod<[_tokenURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawReputationFromFactory"
  ): TypedContractMethod<
    [_token: AddressLike, _toNewNetwork: AddressLike, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
